{"version":3,"sources":["../src/engine.js"],"names":["Events","Context","Validator","State","AVAILABLE","PROCESSED","ABORT","intersect","array1","array2","filter","value","indexOf","Component","constructor","name","worker","node","inputs","outputs","args","EngineEvents","Recursion","nodes","extractInputNodes","Object","keys","reduce","acc","key","connections","nodesData","b","c","findSelf","list","inputNodes","inters","length","l","inter","detect","nodesArr","map","id","Engine","clone","engine","components","forEach","register","throwError","message","data","abort","trigger","processDone","processStart","state","console","warn","success","onAbort","Promise","ret","lock","res","unlockPool","busy","outputData","push","unlock","a","extractInputData","obj","input","conns","connData","all","prevNode","processNode","output","processWorker","inputData","component","get","e","forwardProcess","nextNode","copy","assign","validate","checking","recursion","msg","recurrentNode","processStartNode","startNode","processUnreachable","i","process","startId"],"mappings":"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","sourcesContent":["\nimport { Events, Context, Validator } from './core.js';\n\nexport const State = { AVAILABLE: 0, PROCESSED: 1, ABORT: 2 }\n\n\nfunction intersect(array1, array2) {\n    return array1.filter(value => -1 !== array2.indexOf(value));\n}\n\n\nexport class Component {\n\n    data = {};\n    engine = null;\n\n    constructor(name) {\n        this.name = name;\n    }\n\n    worker(node, inputs, outputs, ...args) {\n        return;\n    };\n}\n\n\nexport class EngineEvents extends Events {\n\n    constructor() {\n        super({});\n    }\n}\n\n\nexport class Recursion {\n    constructor(nodes) {\n        this.nodes = nodes;\n    }\n\n    extractInputNodes(node) {\n        return Object.keys(node.inputs).reduce((acc, key) => {\n            const { connections } = node.inputs[key];\n            const nodesData = (connections || []).reduce((b, c) => {\n                return [...b, this.nodes[c.node]];\n            }, []);\n\n            return [...acc, ...nodesData]\n        }, []);\n    }\n\n    findSelf(list, inputNodes) {\n        const inters = intersect(list, inputNodes);\n\n        if (inters.length)\n            return inters[0];\n\n        for (let node of inputNodes) {\n            let l = [node, ...list];\n            let inter = this.findSelf(l, this.extractInputNodes(node));\n\n            if (inter)\n                return inter;\n        }\n\n        return null;\n    }\n\n    detect() {\n        const nodesArr = Object.keys(this.nodes).map(id => this.nodes[id]);\n\n        for (let node of nodesArr) {\n            let inters = this.findSelf([node], this.extractInputNodes(node));\n\n            if (inters)\n                return inters;\n        }\n\n        return null;\n    }\n}\n\n\nexport class Engine extends Context {\n\n    args = [];\n    data = null;\n    state = State.AVAILABLE;\n    onAbort = () => { };\n\n    constructor(id) {\n        super(id, new EngineEvents());\n    }\n\n    clone() {\n        const engine = new Engine(this.id);\n\n        this.components.forEach(c => engine.register(c));\n\n        return engine;\n    }\n\n    async throwError(message, data = null) {\n        await this.abort();\n        this.trigger('error', { message, data });\n        this.processDone();\n\n        return 'error';\n    }\n\n    processStart() {\n        if (this.state === State.AVAILABLE) {\n            this.state = State.PROCESSED;\n            return true;\n        }\n\n        if (this.state === State.ABORT) {\n            return false;\n        }\n\n        console.warn(`The process is busy and has not been restarted.\n                Use abort() to force it to complete`);\n        return false;\n    }\n\n    processDone() {\n        const success = this.state !== State.ABORT;\n\n        this.state = State.AVAILABLE;\n\n        if (!success) {\n            this.onAbort();\n            this.onAbort = () => { }\n        }\n\n        return success;\n    }\n\n    async abort() {\n        return new Promise(ret => {\n            if (this.state === State.PROCESSED) {\n                this.state = State.ABORT;\n                this.onAbort = ret;\n            }\n            else if (this.state === State.ABORT) {\n                this.onAbort();\n                this.onAbort = ret;\n            }\n            else\n                ret();\n        });\n    }\n\n    async lock(node) {\n        return new Promise(res => {\n            node.unlockPool = node.unlockPool || [];\n            if (node.busy && !node.outputData)\n                node.unlockPool.push(res);\n            else\n                res();\n\n            node.busy = true;\n        });\n    }\n\n    unlock(node) {\n        node.unlockPool.forEach(a => a());\n        node.unlockPool = [];\n        node.busy = false;\n    }\n\n    async extractInputData(node) {\n        const obj = {};\n\n        for (let key of Object.keys(node.inputs)) {\n            const input = node.inputs[key];\n            const conns = input.connections;\n            const connData = await Promise.all(conns.map(async (c) => {\n                const prevNode = (this.data).nodes[c.node];\n\n                const outputs = await this.processNode(prevNode);\n\n                if (!outputs)\n                    this.abort();\n                else\n                    return outputs[c.output];\n            }));\n\n            obj[key] = connData;\n        }\n\n        return obj;\n    }\n\n    async processWorker(node) {\n        const inputData = await this.extractInputData(node);\n        const component = this.components.get(node.name);\n        const outputData = {};\n\n        try {\n            await component.worker(node, inputData, outputData, ...this.args);\n        } catch (e) {\n            this.abort();\n            this.trigger('warn', e);\n        }\n\n        return outputData;\n    }\n\n    async processNode(node) {\n        if (this.state === State.ABORT || !node)\n            return null;\n\n        await this.lock(node);\n\n        if (!node.outputData) {\n            node.outputData = await this.processWorker(node);\n        }\n\n        this.unlock(node);\n        return node.outputData;\n    }\n\n    async forwardProcess(node) {\n        if (this.state === State.ABORT)\n            return null;\n\n        return await Promise.all(Object.keys(node.outputs).map(async (key) => {\n            const output = node.outputs[key];\n\n            return await Promise.all(output.connections.map(async (c) => {\n                const nextNode = this.data.nodes[c.node];\n\n                await this.processNode(nextNode);\n                await this.forwardProcess(nextNode);\n            }));\n        }));\n    }\n\n    copy(data) {\n        data = Object.assign({}, data);\n        data.nodes = Object.assign({}, data.nodes);\n\n        Object.keys(data.nodes).forEach(key => {\n            data.nodes[key] = Object.assign({}, data.nodes[key])\n        });\n        return data;\n    }\n\n    async validate(data) {\n        const checking = Validator.validate(this.id, data);\n        const recursion = new Recursion(data.nodes);\n\n        if (!checking.success)\n            return await this.throwError(checking.msg);\n\n        const recurrentNode = recursion.detect();\n\n        if (recurrentNode)\n            return await this.throwError('Recursion detected', recurrentNode);\n\n        return true;\n    }\n\n    async processStartNode(id) {\n        if (!id) return;\n\n        let startNode = this.data.nodes[id];\n\n        if (!startNode)\n            return await this.throwError('Node with such id not found');\n\n        await this.processNode(startNode);\n        await this.forwardProcess(startNode);\n    }\n\n    async processUnreachable() {\n        const data = this.data;\n\n        for (let i in data.nodes) { // process nodes that have not been reached\n            const node = data.nodes[i];\n\n            if (typeof node.outputData === 'undefined') {\n                await this.processNode(node);\n                await this.forwardProcess(node);\n            }\n        }\n    }\n\n    async process(data, startId = null, ...args) {\n        if (!this.processStart()) return;\n        if (!this.validate(data)) return;\n\n        this.data = this.copy(data);\n        this.args = args;\n\n        await this.processStartNode(startId);\n        await this.processUnreachable();\n\n        return this.processDone() ? 'success' : 'aborted';\n    }\n}\n"],"file":"engine.js"}