{"version":3,"sources":["../src/engine.js"],"names":["State","AVAILABLE","PROCESSED","ABORT","intersect","array1","array2","filter","value","indexOf","Component","constructor","name","worker","node","inputs","outputs","EngineEvents","Events","Recursion","nodes","extractInputNodes","Object","keys","reduce","acc","key","connections","nodesData","b","c","findSelf","list","inputNodes","inters","length","l","inter","detect","nodesArr","map","id","Engine","Context","clone","engine","components","forEach","register","throwError","message","data","abort","trigger","processDone","processStart","state","console","warn","success","onAbort","Promise","ret","lock","res","unlockPool","busy","outputData","push","unlock","a","extractInputData","obj","input","conns","connData","all","prevNode","processNode","output","processWorker","inputData","component","get","args","e","forwardProcess","nextNode","copy","assign","validate","checking","Validator","recursion","msg","recurrentNode","processStartNode","startNode","processUnreachable","i","process","startId"],"mappings":"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","sourcesContent":["\nimport { Events, Context, Validator } from './core.js';\n\nexport const State = { AVAILABLE: 0, PROCESSED: 1, ABORT: 2 }\n\n\nfunction intersect(array1, array2) {\n    return array1.filter(value => -1 !== array2.indexOf(value));\n}\n\n\nexport class Component {\n\n    data = {};\n    engine = null;\n\n    constructor(name) {\n        this.name = name;\n    }\n\n    worker(node, inputs, outputs, ...args) {\n        return;\n    };\n}\n\n\nexport class EngineEvents extends Events {\n\n    constructor() {\n        super({});\n    }\n}\n\n\nexport class Recursion {\n    constructor(nodes) {\n        this.nodes = nodes;\n    }\n\n    extractInputNodes(node) {\n        return Object.keys(node.inputs).reduce((acc, key) => {\n            const { connections } = node.inputs[key];\n            const nodesData = (connections || []).reduce((b, c) => {\n                return [...b, this.nodes[c.node]];\n            }, []);\n\n            return [...acc, ...nodesData]\n        }, []);\n    }\n\n    findSelf(list, inputNodes) {\n        const inters = intersect(list, inputNodes);\n\n        if (inters.length)\n            return inters[0];\n\n        for (let node of inputNodes) {\n            let l = [node, ...list];\n            let inter = this.findSelf(l, this.extractInputNodes(node));\n\n            if (inter)\n                return inter;\n        }\n\n        return null;\n    }\n\n    detect() {\n        const nodesArr = Object.keys(this.nodes).map(id => this.nodes[id]);\n\n        for (let node of nodesArr) {\n            let inters = this.findSelf([node], this.extractInputNodes(node));\n\n            if (inters)\n                return inters;\n        }\n\n        return null;\n    }\n}\n\n\nexport class Engine extends Context {\n\n    args = [];\n    data = null;\n    state = State.AVAILABLE;\n    onAbort = () => { };\n\n    constructor(id) {\n        super(id, new EngineEvents());\n    }\n\n    clone() {\n        const engine = new Engine(this.id);\n\n        this.components.forEach(c => engine.register(c));\n\n        return engine;\n    }\n\n    async throwError(message, data = null) {\n        await this.abort();\n        this.trigger('error', { message, data });\n        this.processDone();\n\n        return 'error';\n    }\n\n    processStart() {\n        if (this.state === State.AVAILABLE) {\n            this.state = State.PROCESSED;\n            return true;\n        }\n\n        if (this.state === State.ABORT) {\n            return false;\n        }\n\n        console.warn(`The process is busy and has not been restarted.\n                Use abort() to force it to complete`);\n        return false;\n    }\n\n    processDone() {\n        const success = this.state !== State.ABORT;\n\n        this.state = State.AVAILABLE;\n\n        if (!success) {\n            this.onAbort();\n            this.onAbort = () => { }\n        }\n\n        return success;\n    }\n\n    async abort() {\n        return new Promise(ret => {\n            if (this.state === State.PROCESSED) {\n                this.state = State.ABORT;\n                this.onAbort = ret;\n            }\n            else if (this.state === State.ABORT) {\n                this.onAbort();\n                this.onAbort = ret;\n            }\n            else\n                ret();\n        });\n    }\n\n    async lock(node) {\n        return new Promise(res => {\n            node.unlockPool = node.unlockPool || [];\n            if (node.busy && !node.outputData)\n                node.unlockPool.push(res);\n            else\n                res();\n\n            node.busy = true;\n        });\n    }\n\n    unlock(node) {\n        node.unlockPool.forEach(a => a());\n        node.unlockPool = [];\n        node.busy = false;\n    }\n\n    async extractInputData(node) {\n        const obj = {};\n\n        for (let key of Object.keys(node.inputs)) {\n            const input = node.inputs[key];\n            const conns = input.connections;\n            const connData = await Promise.all(conns.map(async (c) => {\n                const prevNode = (this.data).nodes[c.node];\n\n                const outputs = await this.processNode(prevNode);\n\n                if (!outputs)\n                    this.abort();\n                else\n                    return outputs[c.output];\n            }));\n\n            obj[key] = connData;\n        }\n\n        return obj;\n    }\n\n    async processWorker(node) {\n        const inputData = await this.extractInputData(node);\n        const component = this.components.get(node.name);\n        const outputData = {};\n\n        try {\n            await component.worker(node, inputData, outputData, ...this.args);\n        } catch (e) {\n            this.abort();\n            this.trigger('warn', e);\n        }\n\n        return outputData;\n    }\n\n    async processNode(node) {\n        if (this.state === State.ABORT || !node)\n            return null;\n\n        await this.lock(node);\n\n        if (!node.outputData) {\n            node.outputData = await this.processWorker(node);\n        }\n\n        this.unlock(node);\n        return node.outputData;\n    }\n\n    async forwardProcess(node) {\n        if (this.state === State.ABORT)\n            return null;\n\n        return await Promise.all(Object.keys(node.outputs).map(async (key) => {\n            const output = node.outputs[key];\n\n            return await Promise.all(output.connections.map(async (c) => {\n                const nextNode = this.data.nodes[c.node];\n\n                await this.processNode(nextNode);\n                await this.forwardProcess(nextNode);\n            }));\n        }));\n    }\n\n    copy(data) {\n        data = Object.assign({}, data);\n        data.nodes = Object.assign({}, data.nodes);\n\n        Object.keys(data.nodes).forEach(key => {\n            data.nodes[key] = Object.assign({}, data.nodes[key])\n        });\n        return data;\n    }\n\n    async validate(data) {\n        const checking = Validator.validate(this.id, data);\n        const recursion = new Recursion(data.nodes);\n\n        if (!checking.success)\n            return await this.throwError(checking.msg);\n\n        const recurrentNode = recursion.detect();\n\n        if (recurrentNode)\n            return await this.throwError('Recursion detected', recurrentNode);\n\n        return true;\n    }\n\n    async processStartNode(id) {\n        if (!id) return;\n\n        let startNode = this.data.nodes[id];\n\n        if (!startNode)\n            return await this.throwError('Node with such id not found');\n\n        await this.processNode(startNode);\n        await this.forwardProcess(startNode);\n    }\n\n    async processUnreachable() {\n        const data = this.data;\n\n        for (let i in data.nodes) { // process nodes that have not been reached\n            const node = data.nodes[i];\n\n            if (typeof node.outputData === 'undefined') {\n                await this.processNode(node);\n                await this.forwardProcess(node);\n            }\n        }\n    }\n\n    async process(data, startId = null, ...args) {\n        if (!this.processStart()) return;\n        if (!this.validate(data)) return;\n\n        this.data = this.copy(data);\n        this.args = args;\n\n        await this.processStartNode(startId);\n        await this.processUnreachable();\n\n        return this.processDone() ? 'success' : 'aborted';\n    }\n}\n"],"file":"engine.js"}