{"version":3,"sources":["../src/node.js"],"names":["Node","constructor","name","Map","id","incrementId","_add","list","item","prop","has","key","Error","set","addControl","control","controls","removeControl","parent","delete","addInput","input","inputs","removeInput","removeConnections","node","addOutput","output","outputs","removeOutput","getConnections","ios","values","connections","reduce","arr","io","update","latestId","resetId","toJSON","reduceIO","Array","from","obj","data","position","fromJSON","json","x","y","Math","max"],"mappings":"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","sourcesContent":["export class Node {\n\n    name;\n    id;\n    position = [0.0, 0.0];\n    inputs = new Map();\n    outputs = new Map();\n    controls = new Map();\n    data = {};\n    meta = {};\n\n    static latestId = 0;\n\n    constructor(name) {\n        this.name = name;\n        this.id = Node.incrementId();\n    }\n\n    _add(list, item, prop) {\n        if (list.has(item.key))\n            throw new Error(`Item with key '${item.key}' already been added to the node`);\n        if (item[prop] !== null)\n            throw new Error('Item has already been added to some node');\n\n        item[prop] = this;\n        list.set(item.key, item);\n    }\n\n    addControl(control) {\n        this._add(this.controls, control, 'parent');\n        return this;\n    }\n\n    removeControl(control) {\n        control.parent = null;\n\n        this.controls.delete(control.key);\n    }\n\n    addInput(input) {\n        this._add(this.inputs, input, 'node');\n        return this;\n    }\n\n    removeInput(input) {\n        input.removeConnections();\n        input.node = null;\n\n        this.inputs.delete(input.key);\n    }\n\n    addOutput(output) {\n        this._add(this.outputs, output, 'node');\n        return this;\n    }\n\n    removeOutput(output) {\n        output.removeConnections();\n        output.node = null;\n\n        this.outputs.delete(output.key);\n    }\n\n    getConnections() {\n        const ios = [...this.inputs.values(), ...this.outputs.values()];\n        const connections = ios.reduce((arr, io) => {\n            return [...arr, ...io.connections];\n        }, []);\n\n        return connections;\n    }\n\n    update() { }\n\n    static incrementId() {\n        if (!this.latestId)\n            this.latestId = 1\n        else\n            this.latestId++\n        return this.latestId\n    }\n\n    static resetId() {\n        this.latestId = 0;\n    }\n\n    toJSON() {\n        const reduceIO = (list) => {\n            return Array.from(list).reduce((obj, [key, io]) => {\n                obj[key] = io.toJSON();\n                return obj;\n            }, {})\n        }\n\n        return {\n            'id': this.id,\n            'data': this.data,\n            'inputs': reduceIO(this.inputs),\n            'outputs': reduceIO(this.outputs),\n            'position': this.position,\n            'name': this.name\n        }\n    }\n\n    static fromJSON(json) {\n        const node = new Node(json.name);\n        const [x, y] = json.position;\n\n        node.id = json.id;\n        node.data = json.data;\n        node.position = [x, y];\n        node.name = json.name;\n        Node.latestId = Math.max(node.id, Node.latestId);\n\n        return node;\n    }\n}\n"],"file":"node.js"}